substitutions:
  device_name: open-air-mini
  friendly_name: Open AIR Mini
  sensor_interval: 10 # seconds

  hum_setpoint: 65  # %
  hum_kp: 3.3333e-2 # !lambda return 1.0 / 30.0; # => each % above setpoint is 3.3% control output
  hum_ki: 3.3333e-4 # !lambda return 1.0 / (10.0 * 60.0 * 5.0); # Full integral takes 10 min. to empty when 5% below setpoint

  co2_setpoint: 700 # ppm
  co2_kp: 3.3333e-3 # !lambda return 1.0 / 300.0; # 1/300 => each 3 ppm above setpoint is 1% control output
  co2_ki: 8.3333e-6 # !lambda return 1.0 / (10.0 * 60.0 * 200.0); # Full integral takes 10 min. to empty when 200ppm below setpoint

  voc_setpoint: 150 # "index"
  voc_kp: 5.0000e-3 # !lambda return 1.0 / 200.0; # 1/200 => each 2 indices above setpoint is 1% control output
  voc_ki: 3.3333e-5 # !lambda return 1.0 / (10.0*60.0*50.0); # Full integral takes 10 min. to empty when 50 indices below setpoint

  nox_setpoint: 15  # "index"
  nox_kp: 5.0000e-3 # !lambda return 1.0 / 200.0; # 1/200 => each 2 indices above setpoint is 1% control output
  nox_ki: 3.3333e-4 # !lambda return 1.0 / (10.0*60.0*5.0); # Full integral takes 10 min. to empty when 10 indices below setpoint

packages:
  common: !include common.yaml
  humidity_pid: !include
    file: pid.yaml
    vars:
      name: humidity
      type: cool
      default_target_value: ${hum_setpoint}
      sensor: air_humidity
      pid_output_friendly_name: "${friendly_name} Humidity PID output"
      kp: ${hum_kp}
      ki: ${hum_ki}
      min_integral: -1.0
      max_integral: 0.0
  co2_pid: !include
    file: pid.yaml
    vars:
      name: co2
      type: cool
      default_target_value: ${co2_setpoint}
      sensor: air_Co2
      pid_output_friendly_name: "${friendly_name} CO2 PID output"
      kp: ${co2_kp}
      ki: ${co2_ki}
      min_integral: -1.0
      max_integral: 0.0
  voc_pid: !include
    file: pid.yaml
    vars:
      name: voc
      type: cool
      default_target_value: ${voc_setpoint}
      sensor: air_VOC
      pid_output_friendly_name: "${friendly_name} VOC PID output"
      kp: ${voc_kp}
      ki: ${voc_ki}
      min_integral: -1.0
      max_integral: 0.0
  nox_pid: !include
    file: pid.yaml
    vars:
      name: nox
      type: cool
      default_target_value: ${nox_setpoint}
      sensor: air_NOx
      pid_output_friendly_name: "${friendly_name} NOx PID output"
      kp: ${nox_kp}
      ki: ${nox_ki}
      min_integral: -1.0
      max_integral: 0.0

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: INFO

# From V1.4.0 The Sensor pins on the Open AIR Mini are swapped. Correct example is below:
#uart:
##UART For Sensor 2
# - rx_pin: GPIO13
#   tx_pin: GPIO12
#   baud_rate: 9600
#   id: uart_sensor_2
##UART For Sensor 1
# - rx_pin: GPIO25
#   tx_pin: GPIO26
#   baud_rate: 9600
#   id: uart_sensor_1

i2c:
##I2C For Sensor 2
#- id: i2c_sensor_2
#  sda: GPIO19
#  scl: GPIO18
#  scan: false
#  frequency: 400kHz
#I2C For Sensor 1
- id: i2c_sensor_1
  sda: GPIO16
  scl: GPIO4
  scan: false
  frequency: 400kHz

# Status led
status_led:
  pin:
    number: GPIO33

#PWM output for controlling the motor.
output:
  - platform: ledc
    pin:
      number: GPIO15
      ignore_strapping_warning: true
    inverted: true
    id: open_air_mini

fan:
  - platform: speed
    output: open_air_mini
    name: "${friendly_name} Fan"
    id: fan_motor

sensor: 
  - platform: pulse_counter
    pin: GPIO14
    unit_of_measurement: 'RPM'
    name: '${friendly_name} RPM'
    id: open_air_mini_rpm
    update_interval: 10s
    total:
      unit_of_measurement: 'Rotations'
      name: '${friendly_name} Rotations'
      state_class: total_increasing
  - platform: scd4x
    i2c_id: i2c_sensor_1
    co2:
      name: "${friendly_name} Sensor 1 CO2"
      id: air_Co2
      accuracy_decimals: 0
    temperature:
      name: "${friendly_name} Sensor 1 Temperature"
      id: air_temperature
      accuracy_decimals: 2
    humidity:
      name: "${friendly_name} Sensor 1 Humidity"
      id: air_humidity
      accuracy_decimals: 2
    update_interval: "${sensor_interval}s"
    measurement_mode: periodic

  - platform: sgp4x
    i2c_id: i2c_sensor_1
    voc:
      name: "${friendly_name} VOC Index "
      id: air_VOC
    nox:
      name: "${friendly_name} NOx Index "
      id: air_NOx
    compensation:
      temperature_source: air_temperature #Make sure to match these if you change ID's.
      humidity_source: air_humidity       #Make sure to match these if you change ID's.
    update_interval: "${sensor_interval}s"

  - platform: combination
    name: "${friendly_name} internal control output"
    unit_of_measurement: "%"
    device_class: "power_factor"
    type: max
    sources:
      - source: humidity_pid_output_sensor
      - source: co2_pid_output_sensor
      - source: voc_pid_output_sensor
      - source: nox_pid_output_sensor
    filters:
      - multiply: 0.85
      - offset: 15.0
    on_value:
      then:
        - output.set_level:
            id: open_air_mini
            level: !lambda return x / 100.0;
