- trigger:
    - platform: state
      entity_id: binary_sensor.slave_ch_active_boiler_ketel
      from: "on"
      id: "ch_turns_off"
    - platform: state
      entity_id: binary_sensor.slave_ch_active_boiler_ketel
      to: "on"
      id: "ch_turns_on"
    - platform: time_pattern
      minutes: "*"
      id: "time"
  action:
    - variables:
        # Data analysis shows the "cycle time" is most stable when measured on the "falling edge" of the
        # "slave_ch_active_boiler_ketel" signal, so that the cycle time is calculated when heating is turned off, and
        # the cycle time is the time between the previous time it was turned off and the current time.
        max_cycle_time: "{{ 17 * 60 }}" # 17 minutes in seconds: 1020 seconds
        duration: >
          {% if trigger.id == "time" %}
            {{  as_timestamp(trigger.now) - as_timestamp(states.binary_sensor.slave_ch_active_boiler_ketel.last_changed) }}
          {% else %}
            {{ as_timestamp(trigger.to_state.last_changed) - as_timestamp(trigger.from_state.last_changed) }}
          {% endif %}
        is_on: "{{ is_state('binary_sensor.slave_ch_active_boiler_ketel', 'on') }}"
        should_update: >
          {{ (trigger.id == "time" and (duration | float) > (max_cycle_time | float)) or (trigger.id == "ch_turns_off") }}
        on_time: >
          {% set max_val = max_cycle_time | float %}
          {% set time = duration | float %}
          {% set prev_val = state_attr('sensor.central_heating_cycle_time', 'on_time') | float(0.0) %}
          {% if trigger.id == "ch_turns_off" %}
            {{ min(max_val, time) }}
          {% elif trigger.id == "ch_turns_on" %}
            {{ prev_val }}
          {% else %}
            {% if is_on | bool and time > max_val %}
              {# Heating is on for more than the maximum cycle time already. Set to the maximum #}
              {{ max_val }}
            {% else %}
              {# Either heating is on but not for long yet, or it is off. Therefore use the previous value #}
              {{ prev_val }}
            {% endif %}
          {% endif %}
        off_time: >
          {% set max_val = max_cycle_time | float %}
          {% set time = duration | float %}
          {% set prev_val = state_attr('sensor.central_heating_cycle_time', 'off_time') | float(0.0) %}
          {% if trigger.id == "ch_turns_on" %}
            {{ min(max_val, time) }}
          {% elif trigger.id == "ch_turns_off" %}
            {{ prev_val }}
          {% else %}
            {% if not (is_on | bool) and time > max_val %}
              {# Heating is off for more than the maximum cycle time already. Set to the maximum #}
              {{ max_val }}
            {% else %}
              {# Either heating is off but not for long yet, or it is on. Therefore use the previous value #}
              {{ prev_val }}
            {% endif %}
          {% endif %}
        total_time: "{{ min(max_cycle_time | float, on_time | float + off_time | float) / 60.0 }}"
        # For the relative on time, take as nominator the minimum between the calculated "on_time" and what is left as
        # "room" in an interval of size "max_cycle_time" when "off_time" has been placed inside already. Specifically,
        # if "off_time" is equal to "max_cycle_time" then there is no room, and so the relative on time becomes 0.
        rel_on_time: >
          {% set on = min(on_time | float, max_cycle_time | float - off_time | float) / 60.0 %}
          {% set total = total_time | float %}
          {{ 0.0 if total <= 0.0 else min(100.0, max(0.0, on / total * 100.0)) }}
  sensor:
    - name: Central Heating Cycle Time
      state: "{{ iif(should_update | bool, total_time, this.state) }}"
      unit_of_measurement: min
      device_class: duration
      attributes:
        on_time: "{{ on_time }}"
        off_time: "{{ off_time }}"
    - name: Central Heating Relative On Time
      state: "{{ iif(should_update | bool, rel_on_time, this.state) }}"
      unit_of_measurement: "%"
