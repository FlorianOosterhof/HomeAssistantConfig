views:
  - type: sections
    max_columns: 4
    title: Long-term view
    path: yearly
    dense_section_placement: true
    sections:
      - type: grid
        cards:
          - type: custom:plotly-graph
            hours_to_show: |-
              $ex {
                vars.now = Date.now()
                vars.start = vars.now - 2*365*24*3600*1000
                
                vars.total_time_h = Math.floor((vars.now - vars.start) / 1000 / 3600);
                vars.hours_to_show = vars.total_time_h
                vars.get_daily_diff = (sum_var, window_size) => {
                  ysn = Array()
                  xsn = Array()
                  const half_window_size = Math.floor(window_size / 2)
                  for (var i = window_size; i < sum_var.ys.length; ++i)
                  {
                    ysn[i-window_size] = 24*(sum_var.ys[i] - sum_var.ys[i-window_size]) / window_size
                    xsn[i-window_size] = sum_var.xs[i]
                  }
                  return {
                    xs: xsn,
                    ys: ysn,
                    states: Array(),
                    statistics: Array(),
                    meta:
                    {
                      unit_of_measurement: sum_var.meta.unit_of_measurement + "/d"
                    }
                  }
                }
                vars.clamp = (val, min, max) =>
                {
                  return Math.min(max, Math.max(min, val));
                }
                vars.calculate_heat_loss_model_fit = (vars, nr_hrs) => {
                  // Model: G(x) = M + L*max(t - x, 0)
                  // G(x) = modeled/expected gas usage during 24 hours where x is the average of some measure of outside weather conditions during those 24 hours.
                  // M  = "miscellaneous" gas usage, e.g. for domestic hot water, cooking, etc.
                  // t = "cut-off" temperature. Temperature above which no heating should be necessary anymore.
                  // L  = "heat loss", the amount of gas usage per degree day.
                  // Note: The input t to G(t) can be simply outside temperature (average over 24h), or for instance KNMI "effective temperature" = T_outside - 3/2*wind_speed

                  const name_gas_var = "gas_1d_daily_avg"
                  const name_temp_var = "temp_1d_daily_avg"

                  console.log("Calculate heat loss for window size " + nr_hrs + " based on variables '" + name_gas_var + "' vs '" + name_temp_var + "'")

                  const N = vars[name_gas_var].ys.length;
                  {
                    const N_other = vars[name_temp_var].ys.length
                    if (N != N_other)
                    {
                      throw new Error(name_gas_var + " and " + name_temp_var + " have unequal lengths: " + N + " & " + N_other + " resp.")
                    }
                  }

                  console.log("Combine data & calculate cumulative data")

                  const inf = 1.0 / 0.0;
                  const nan = 0.0 / 0.0;

                  var data = Array()
                  var cumulative_data = Array()
                  var t00 = 0.0;
                  var t01 = 0.0;
                  var t02 = 0.0;
                  for (var i = 0; i < N; ++i)
                  {
                    const x = vars[name_temp_var].ys[i];
                    const y = vars[name_gas_var].ys[i];
                    t00 += 1;
                    t01 += y;
                    t02 += y * y;
                    data[i] = [x, y, i]

                    const j = i - (nr_hrs - 1);

                    // cumulative_data[i] = [t00, t01, t02, s00, s10, s20, s11, s01, ssres_opt, M_opt, t_opt, L_opt, x_prev]
                    cumulative_data[i] =    [t00, t01, t02, 0.0, 0.0, 0.0, 0.0, 0.0, inf,       nan,   nan,   nan,   -inf]

                    if (j >= 0)
                    {
                      y_prev = vars[name_gas_var].ys[j];
                      t00 -= 1;
                      t01 -= y_prev;
                      t02 -= y_prev * y_prev;
                    }
                  }

                  console.log("Sort combined data")

                  const data_sorted = data.toSorted(
                    (d0, d1) => {
                      return d0[0] - d1[0];
                    }
                  );

                  console.log("Iterate over sorted combined data.")

                  for (var i = 0; i < N; ++i)
                  {
                    const data_elt = data_sorted[i];
                    const x = data_elt[0]
                    const y = data_elt[1]
                    const j = data_elt[2]

                    for (var k = 0; k < nr_hrs && j+k < N; ++k)
                    {
                      const t00 = cumulative_data[j+k][0]
                      const t01 = cumulative_data[j+k][1]
                      const t02 = cumulative_data[j+k][2]
                      const s00 = cumulative_data[j+k][3]
                      const s10 = cumulative_data[j+k][4]
                      const s20 = cumulative_data[j+k][5]
                      const s11 = cumulative_data[j+k][6]
                      const s01 = cumulative_data[j+k][7]
                      var ssres_opt = cumulative_data[j+k][8]
                      var M_opt = cumulative_data[j+k][9]
                      var t_opt = cumulative_data[j+k][10]
                      var L_opt = cumulative_data[j+k][11]
                      const x_prev = cumulative_data[j+k][12]

                      const det = s10*s10 - s00*s20
                      // By Sedrakyan's lemma det <= 0 and == 0 if and only if all xi are equal.
                      // Therefore, if det >= 0.0 the det == 0.0
                      if (det < 0.0)
                      {
                        const M = s00 < t00 ? (t01 - s01) / (t00 - s00) : 0.0
                        const L_num = s00 * s11 - s01 * s10
                        const L =  L_num / det

                        // t0 = (...) / det / L
                        //    = (...) / (L * det)
                        //    = (...) / L_num
                        // Since we look at the interval [x_prev, x] for t0, the minimum is attained either where
                        // derivative = 0 or at the boundary closest to that point. So clamp between [x_prev, x]
                        const t0_orig = (M * s00 * s20 - M * s10 * s10 - s01 * s20 + s10 * s11) / L_num
                        const t0 = vars.clamp(t0_orig, x_prev, x)

                        const ssres = t02 - 2*M*t01 + t00*M*M - 2*L*t0*s01 + 2*L*s11 + 2*M*L*t0*s00 - 2*M*L*s10 + L*L*t0*t0*s00 - 2*L*L*t0*s10 + L*L*s20

                        if (ssres < ssres_opt)
                        {
                          ssres_opt = ssres
                          t_opt = t0
                          L_opt = L
                          M_opt = M
                        }
                      }

                      cumulative_data[j+k][3] = s00 + 1
                      cumulative_data[j+k][4] = s10 + x
                      cumulative_data[j+k][5] = s20 + x * x
                      cumulative_data[j+k][6] = s11 + x * y
                      cumulative_data[j+k][7] = s01 + y
                      cumulative_data[j+k][8] = ssres_opt
                      cumulative_data[j+k][9] = M_opt
                      cumulative_data[j+k][10] = t_opt
                      cumulative_data[j+k][11] = L_opt
                      cumulative_data[j+k][12] = x
                    }
                  }

                  console.log("Extract fit parameters from algorithm data")

                  var M_opt_a = Array()
                  var L_opt_a = Array()
                  var t_opt_a = Array()

                  for (var i = 0; i < N; ++i)
                  {
                    const j = Math.max(nr_hrs - 1, i);
                    M_opt_a[i] = cumulative_data[j][9]
                    t_opt_a[i] = cumulative_data[j][10]
                    L_opt_a[i] = cumulative_data[j][11]
                  }

                  return {
                    xs: vars[name_temp_var].xs,
                    ys: L_opt_a,
                    states: Array(),
                    statistics: Array(),
                    meta: {
                      unit_of_measurement: "m³/°Cd",
                      t_opt: t_opt_a,
                      M_opt: M_opt_a,
                      L_opt: L_opt_a
                    }
                  }
                }
                vars.restore_heat_loss_model_fit = (vars) =>
                {
                  const N = vars.temp_1d_daily_avg.ys.length

                  // Heat loss model fit only works well with sufficient data, e.g. a full year.
                  const nr_hrs = 365*24
                  const name = "heat_loss_model_1y"
                  const expected_nr_windows = N

                  if (name in window && window[name].ys.length == expected_nr_windows)
                  {
                    console.log("Do not recalculate heat loss '" + name + "'")
                    return window[name]
                  }
                  else
                  {
                    const data = vars.calculate_heat_loss_model_fit(vars, nr_hrs)
                    console.log(data)
                    window[name] = data
                    return data
                  }
                }
                return vars.hours_to_show + "h"
              }
            title: Daily average gas usage for Central Heating
            entities:
              - entity: sensor.gas_consumed_for_ch
                statistic: sum
                name: 1day-average gas usage
                yaxis: y1
                filters:
                  - resample: 1h
                  - store_var: gas_sum
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum, 24);}
                  - store_var: gas_1d_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1week-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum, 7*24);}
                  - store_var: gas_1w_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1month-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum, 31*24);}
                  - store_var: gas_1m_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 6month-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum, 182.5*24);}
                  - store_var: gas_6m_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1year-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum, 365*24);}
                  - store_var: gas_1y_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: sensor.template_location_1_knmi_temperature
                statistic: mean
                name: 1day-average outside temperature
                yaxis: y2
                filters:
                  - resample: 1h
                  - filter: x >= vars.gas_sum.xs[0]
                  - store_var: temp_raw
                  - fn: >-
                      ({ys}) => {
                        var ys_new = Array()
                        var ys_acc = 0.0
                        for (var i = 0; i < ys.length; ++i)
                        {
                          ys_acc += ys[i];
                          ys_new[i] = ys_acc / 24
                        }
                        return {
                          ys: ys_new
                        }
                      }
                  - store_var: temp_sum
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.temp_sum, 24);}
                  - fn: >-
                      ({vars}) => { return { meta: {unit_of_measurement: "°C" } } }
                  - store_var: temp_1d_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1week-average outside temperature
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.temp_sum, 7*24);}
                  - store_var: temp_1w_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1month-average outside temperature
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.temp_sum, 31*24);}
                  - store_var: temp_1m_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 6month-average outside temperature
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.temp_sum, 182.5*24);}
                  - store_var: temp_6m_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1year-average outside temperature
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.temp_sum, 365*24);}
                  - store_var: temp_1y_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                internal: true
                filters:
                  - fn: |-
                      ({vars}) => {
                        return vars.restore_heat_loss_model_fit(vars, "1y", 365*24)
                      }
                  - store_var: heat_loss_model_1y
              - entity: null
                #filters:
                #  - fn: |-
                #      ({vars}) => {
                #        return vars.restore_heat_loss_model_fit(vars, "1w", 7*24)
                #      }
                #  - store_var: heat_loss_model_1w
                #yaxis: y3
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: $ex meta.unit_of_measurement
                #name: 1week modelled heat loss
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - fn: |-
                #      ({vars}) => {
                #        return vars.restore_heat_loss_model_fit(vars, "1m", 30*24)
                #      }
                #  - store_var: heat_loss_model_1m
                #yaxis: y3
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: $ex meta.unit_of_measurement
                #name: 1month modelled heat loss
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - fn: |-
                #      ({vars}) => {
                #        return vars.restore_heat_loss_model_fit(vars, "6m", 365/2*24)
                #      }
                #  - store_var: heat_loss_model_6m
                #yaxis: y3
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: $ex meta.unit_of_measurement
                #name: 6month modelled heat loss
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                yaxis: y3
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: "m³/°Cd"
                name: 1year modelled heat loss
                show_value: true
                texttemplate: $fn ({getFromConfig}) => '%{y:.4f} ' + getFromConfig(".unit_of_measurement")
              - entity: null
                internal: true
                yaxis: y4
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1w
                #yaxis: y4
                #x: $ex xs
                #"y": $ex meta.t0
                #unit_of_measurement: "°C"
                #name: 1week modeled base temp
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1m
                #yaxis: y4
                #x: $ex xs
                #"y": $ex meta.t0
                #unit_of_measurement: "°C"
                #name: 1month modeled base temp
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_6m
                #yaxis: y4
                #x: $ex xs
                #"y": $ex meta.t0
                #unit_of_measurement: "°C"
                #name: 6month modeled base temp
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                  - map_y_numbers: meta.t_opt[i]
                yaxis: y4
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: "°C"
                name: 1year modeled base temp
                show_value: true
                texttemplate: $fn ({getFromConfig}) => '%{y:.2f} ' + getFromConfig(".unit_of_measurement")
              - entity: null
                internal: true
                yaxis: y5
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1w
                #yaxis: y5
                #x: $ex xs
                #"y": $ex meta.M
                #unit_of_measurement: "m³"
                #name: 1week modeled miscellaneous gas use
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1m
                #yaxis: y5
                #x: $ex xs
                #"y": $ex meta.M
                #unit_of_measurement: "m³"
                #name: 1month modeled miscellaneous gas use
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_6m
                #yaxis: y5
                #x: $ex xs
                #"y": $ex meta.M
                #unit_of_measurement: "m³"
                #name: 6month modeled miscellaneous gas use
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                  - map_y_numbers: meta.M_opt[i]
                yaxis: y5
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: "m³"
                name: 1year modeled miscellaneous gas use
                show_value: true
                texttemplate: $fn ({getFromConfig}) => '%{y:.4f} ' + getFromConfig(".unit_of_measurement")
              - entity: null
                internal: true
                yaxis: y6
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1w
                #  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                #yaxis: y6
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: "kW"
                #name: 1week modelled capacity
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1m
                #  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                #yaxis: y6
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: "kW"
                #name: 1month modelled capacity
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_6m
                #  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                #yaxis: y6
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: "kW"
                #name: 6month modelled capacity
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                  - map_y_numbers: (meta.L_opt[i] * (meta.t_opt[i]+10)) * 8.8 / 20
                yaxis: y6
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: "kW"
                name: 1year modelled capacity
                show_value: true
                texttemplate: $fn ({getFromConfig}) => '%{y:.3f} ' + getFromConfig(".unit_of_measurement")
            grid_options:
              columns: full
            refresh_interval: 1h
            raw_plotly_config: true
            color_scheme:
              - "#1f77b4"
              - "#ff7f0e"
              - "#2ca02c"
              - "#d62728"
              - "#9467bd"
            defaults:
              entity:
                line:
                  width: 1
                  color: |-
                    $fn ({ getFromConfig, path }) => {
                      const color_scheme = getFromConfig("color_scheme");
                      const t1 = path.match(/entities\.(\d+)/)
                      const t2 = t1[1]
                      return color_scheme[t2 % color_scheme.length];
                    }
              yaxes:
                side: left
                overlaying: "y"
                visible: true
                showgrid: true
                nticks: 6
            layout:
              dragmode: pan
              margin:
                t: 30
                l: 45
                r: 30
                b: 50
              height: 1800
              grid:
                rows: 6
                columns: 1
                pattern: coupled
                roworder: top to bottom
              legend:
                orientation: h
        column_span: 4
    cards: []
title: Central heating Long-Term
