views:
  - type: sections
    max_columns: 4
    title: Long-term view
    path: yearly
    dense_section_placement: true
    sections:
      - type: grid
        cards:
          - type: custom:plotly-graph
            hours_to_show: |-
              $ex {
                vars.now = Date.now()
                vars.start = vars.now - 2*365*24*3600*1000
                
                vars.total_time_h = Math.floor((vars.now - vars.start) / 1000 / 3600);
                vars.hours_to_show = vars.total_time_h
                vars.get_daily_diff = (sum_var, window_size) => {
                  ysn = Array()
                  xsn = Array()
                  const half_window_size = Math.floor(window_size / 2)
                  for (var i = window_size; i < sum_var.ys.length; ++i)
                  {
                    ysn[i-window_size] = 24*(sum_var.ys[i] - sum_var.ys[i-window_size]) / window_size
                    xsn[i-window_size] = sum_var.xs[i]
                  }
                  return {
                    xs: xsn,
                    ys: ysn,
                    states: Array(),
                    statistics: Array(),
                    meta:
                    {
                      unit_of_measurement: sum_var.meta.unit_of_measurement + "/d"
                    }
                  }
                }
                vars.get_heat_loss = (vars, time) => {
                  var xsn = Array()
                  var ysn = Array()

                  const energy = vars["gas_" + time + "_daily_avg"]
                  const degdays = vars["degday_" + time + "_daily_avg"]
                  const base_temps = vars["base_temp_" + time]
                  const n0 = energy.ys.length
                  const n1 = degdays.ys.length
                  const N = Math.min(n0, n1)
                  for (var i = 0; i < N; ++i)
                  {
                    xsn[i] = energy.xs[i + n0 - N];
                    ysn[i] = energy.ys[i + n0 - N] * 8.8 / (degdays.ys[i + n1 - N] * 20) * (base_temps.ys[i + n1 - N] + 10);
                  }
                  const old_unit = "m³/°Cd"
                  return {
                    xs: xsn,
                    ys: ysn,
                    states: Array(),
                    statistics: Array(),
                    meta: {
                      unit_of_measurement: "kW"
                    }
                  }
                }
                vars.clamp = (val, min, max) =>
                {
                  return Math.min(max, Math.max(min, val));
                }
                vars.get_heat_loss_model_fit = (vars, nr_hrs) => {
                  var t0a = Array()
                  var La = Array()
                  var Ma = Array()
                  var xa = Array()
                  var ssresa = Array()
                  // Model: G(t) = M + L*max(t0 - t, 0)
                  // G(t) = modeled/expected gas usage during 24 hours where t is the average outside temperature of those 24 hours.
                  // M  = "miscellaneous" gas usage, e.g. for domestic hot water, cooking, etc.
                  // t0 = "cut-off" temperature. Temperature above which no heating should be necessary anymore.
                  // L  = "heat loss", the amount of gas usage per degree day.

                  const name_gas_var = "gas_1d_daily_avg"
                  const name_temp_var = "temp_1d_avg"

                  const n0 = vars[name_gas_var].ys.length
                  const n1 = vars[name_temp_var].ys.length
                  const N = Math.min(n0, n1)

                  var data = Array()
                  for (var i = 0; i < N; ++i)
                  {
                    data[i] = [vars[name_temp_var].ys[n1 - N + i], vars[name_gas_var].ys[n0 - N + i]]
                  }

                  var T01 = Array()
                  var T02 = Array()

                  for (var i = 0; i < N - nr_hrs; ++i)
                  {
                    xa[i] = vars[name_gas_var].xs[n0 - N + i + nr_hrs]
                    const data_sub = data.slice(i, i + nr_hrs).toSorted(
                      (d0, d1) => {
                        return d0[0] - d1[0]
                      }
                    )
                    var t01 = 0.0
                    var t02 = 0.0
                    const t00 = nr_hrs
                    for (var j = 0; j < nr_hrs; ++j)
                    {
                      const y = data_sub[j][1]
                      t01 += y
                      t02 += y * y
                    }

                    T01[i] = t01
                    T02[i] = t02

                    var s10 = 0.0
                    var s20 = 0.0
                    var s01 = 0.0
                    var s11 = 0.0
                    var x_next = data_sub[0][0]

                    var min_ssres = 1.0 / 0.0 // inf
                    var t0_opt = 0.0 / 0.0 // nan
                    var L_opt = t0_opt
                    var M_opt = t0_opt

                    for (var j = 0; j < nr_hrs; ++j)
                    {
                      const s00 = j + 1
                      const x = x_next
                      x_next = (j + 1 < nr_hrs) ? data_sub[j+1][0] : 0.0 / 0.0
                      const y = data_sub[j][1]
                      s10 += x
                      s20 += x * x
                      s01 += y
                      s11 += x * y

                      const c = t01 - s01

                      const det = s10*s10 - s00*s20
                      // By Sedrakyan's lemma det <= 0 and == 0 if and only if all xi are equal.
                      // If det >= 0.0 the det == 0.0
                      if (det >= 0.0)
                      {
                        continue
                      }

                      const M = j < t00 ? c / (t00 - j) : 0.0
                      const L_num = s00 * s11 - s01 * s10
                      const L =  L_num / det

                      // t0 = (...) / det / L = (...) / (L * det) = (...) / L_num
                      // Since we look at the interval [x, x_next] for t0, the minimum is attained either where
                      // derivative = 0 or at the boundary closest to that point. So clamp between [x, x_next]
                      const t0_orig = (M * s00 * s20 - M * s10 * s10 - s01 * s20 + s10 * s11) / L_num
                      const t0 = vars.clamp(t0_orig, x, x_next)

                      const ssres = t02 - 2*M*t01 + t00*M*M - 2*L*t0*s01 + 2*L*s11 + 2*M*L*t0*s00 - 2*M*L*s10 + L*L*t0*t0*s00 - 2*L*L*t0*s10 + L*L*s20

                      if (ssres < min_ssres)
                      {
                        min_ssres = ssres
                        t0_opt = t0
                        L_opt = L
                        M_opt = M
                      }
                    }

                    t0a[i] = t0_opt
                    La[i] = L_opt
                    Ma[i] = M_opt
                    ssresa[i] = min_ssres
                  }

                  return {
                    xs: xa,
                    ys: La,
                    states: Array(),
                    statistics: Array(),
                    meta: {
                      t0: t0a,
                      M: Ma,
                      ssres: ssresa,
                      T01: T01,
                      T02: T02,
                      unit_of_measurement: "m³/°Cd"
                    }
                  }
                }
                vars.restore_heat_loss_model_fit = (vars, name_suffix, nr_hrs) =>
                {
                  const n0 = vars.temp_1d_avg.ys.length
                  const n1 = vars.gas_1d_daily_avg.ys.length
                  const N = Math.min(n0, n1)

                  const e = N - nr_hrs

                  const name = "heat_loss_model_" + name_suffix

                  if (name in window && window[name].ys.length == e)
                  {
                    console.log("Do not recalculate heat loss '" + name + "'")
                    return window[name]
                  }
                  else
                  {
                    console.log("Recalculate heat loss '" + name + "': " + (name in window) + " : " + (name in window ? window[name].ys.length : -1) + " : " + (e))
                    const data = vars.get_heat_loss_model_fit(vars, nr_hrs)
                    console.log(data)
                    window[name] = data
                    return data
                  }
                }
                return vars.hours_to_show + "h"
              }
            title: Daily average gas usage for Central Heating
            entities:
              - entity: sensor.gas_consumed_for_ch
                statistic: sum
                name: 1day-average gas usage
                yaxis: y1
                filters:
                  - resample: 1h
                  - store_var: gas_sum
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum,
                      24);}
                  - store_var: gas_1d_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1week-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum,
                      7*24);}
                  - store_var: gas_1w_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1month-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum,
                      31*24);}
                  - store_var: gas_1m_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 6month-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum,
                      182.5*24);}
                  - store_var: gas_6m_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: null
                name: 1year-average gas usage
                yaxis: y1
                filters:
                  - fn: >-
                      ({vars}) => {return vars.get_daily_diff(vars.gas_sum,
                      365*24);}
                  - store_var: gas_1y_daily_avg
                x: $ex xs
                "y": $ex ys
              - entity: sensor.template_location_1_knmi_temperature
                statistic: mean
                name: 1day-daily average degreedays
                yaxis: y2
                filters:
                  - resample: 1h
                  - store_var: temp_raw
                  - sliding_window_moving_average:
                      window_size: 24
                      centered: false
                  - store_var: temp_1d_avg
                  - map_y_numbers: |-
                      {
                        const base_temps = [
                          [xs[0], 20.0],
                          [new Date("2021-08-01 00:00:00Z"), 18.0],
                          [new Date("2022-08-01 00:00:00Z"), 20.0],
                          [new Date("2024-05-06 00:00:00Z"), 20.0]
                        ]
                        var j = 0;
                        while (j < base_temps.length && base_temps[j][0] <= xs[i])
                        {
                          j += 1
                        }
                        return base_temps[j-1][1] - 2
                      }
                  - store_var: base_temp_1d
                  - map_y_numbers: >-
                      Math.max(vars.base_temp_1d.ys[i] - vars.temp_1d_avg.ys[i],
                      0)
                  - integrate: d
                  - store_var: degday_sum
                  - fn: >-
                      ({vars}) => { return vars.get_daily_diff(vars.degday_sum,
                      24) }
                  - fn: >-
                      ({vars}) => { return { meta: { unit_of_measurement: "°C" }
                      } }
                  - store_var: degday_1d_daily_avg
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1week-daily average degreedays
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => { return vars.get_daily_diff(vars.degday_sum,
                      7*24) }
                  - fn: >-
                      ({vars}) => { return { meta: { unit_of_measurement: "°C" }
                      } }
                  - store_var: degday_1w_daily_avg
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1month-daily average degreedays
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => { return vars.get_daily_diff(vars.degday_sum,
                      31*24) }
                  - fn: >-
                      ({vars}) => { return { meta: { unit_of_measurement: "°C" }
                      } }
                  - store_var: degday_1m_daily_avg
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 6month-daily average degreedays
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => { return vars.get_daily_diff(vars.degday_sum,
                      182.5*24) }
                  - fn: >-
                      ({vars}) => { return { meta: { unit_of_measurement: "°C" }
                      } }
                  - store_var: degday_6m_daily_avg
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1year-daily average degreedays
                yaxis: y2
                filters:
                  - fn: >-
                      ({vars}) => { return vars.get_daily_diff(vars.degday_sum,
                      365*24) }
                  - fn: >-
                      ({vars}) => { return { meta: { unit_of_measurement: "°C" }
                      } }
                  - store_var: degday_1y_daily_avg
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1day-daily average base temperature
                yaxis: y2
                filters:
                  - load_var: base_temp_1d
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1week-daily average base temperature
                yaxis: y2
                filters:
                  - load_var: base_temp_1d
                  - sliding_window_moving_average:
                      window_size: $ex 7 * 24
                      centered: false
                  - store_var: base_temp_1w
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1month-daily average base temperature
                yaxis: y2
                filters:
                  - load_var: base_temp_1d
                  - sliding_window_moving_average:
                      window_size: $ex 31 * 24
                      centered: false
                  - store_var: base_temp_1m
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 6month-daily average base temperature
                yaxis: y2
                filters:
                  - load_var: base_temp_1d
                  - sliding_window_moving_average:
                      window_size: $ex 182.5 * 24
                      centered: false
                  - store_var: base_temp_6m
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                name: 1year-daily average base temperature
                yaxis: y2
                filters:
                  - load_var: base_temp_1d
                  - sliding_window_moving_average:
                      window_size: $ex 365 * 24
                      centered: false
                  - store_var: base_temp_1y
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
              - entity: null
                filters:
                  - fn: ({vars}) => { return (vars.get_heat_loss(vars, "1d")) }
                  - store_var: heat_loss_1d
                yaxis: y3
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
                name: 1day average capacity
                show_value: true
              - entity: null
                filters:
                  - fn: ({vars}) => { return (vars.get_heat_loss(vars, "1w")) }
                  - store_var: heat_loss_1w
                yaxis: y3
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
                name: 1week average capacity
                show_value: true
              - entity: null
                filters:
                  - fn: ({vars}) => { return (vars.get_heat_loss(vars, "1m")) }
                  - store_var: heat_loss_1m
                yaxis: y3
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
                name: 1month average capacity
                show_value: true
              - entity: null
                filters:
                  - fn: ({vars}) => { return (vars.get_heat_loss(vars, "6m")) }
                  - store_var: heat_loss_6m
                yaxis: y3
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
                name: 6month average capacity
                show_value: true
              - entity: null
                filters:
                  - fn: ({vars}) => { return (vars.get_heat_loss(vars, "1y")) }
                  - store_var: heat_loss_1y
                yaxis: y3
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: $ex meta.unit_of_measurement
                name: 1year average capacity
                show_value: true
              - entity: null
                internal: true
                yaxis: y4
              - entity: null
                #filters:
                #  - fn: |-
                #      ({vars}) => {
                #        return vars.restore_heat_loss_model_fit(vars, "1w", 7*24)
                #      }
                #  - store_var: heat_loss_model_1w
                #yaxis: y4
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: $ex meta.unit_of_measurement
                #name: 1week modelled heat loss
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - fn: |-
                #      ({vars}) => {
                #        return vars.restore_heat_loss_model_fit(vars, "1m", 30*24)
                #      }
                #  - store_var: heat_loss_model_1m
                #yaxis: y4
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: $ex meta.unit_of_measurement
                #name: 1month modelled heat loss
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - fn: |-
                #      ({vars}) => {
                #        return vars.restore_heat_loss_model_fit(vars, "6m", 365/2*24)
                #      }
                #  - store_var: heat_loss_model_6m
                #yaxis: y4
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: $ex meta.unit_of_measurement
                #name: 6month modelled heat loss
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - fn: |-
                      ({vars}) => {
                        return vars.restore_heat_loss_model_fit(vars, "1y", 365*24)
                      }
                  - store_var: heat_loss_model_1y
                yaxis: y4
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: "m³/°Cd"
                name: 1year modelled heat loss
                show_value: true
              - entity: null
                internal: true
                yaxis: y5
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1w
                #yaxis: y5
                #x: $ex xs
                #"y": $ex meta.t0
                #unit_of_measurement: "°C"
                #name: 1week modeled base temp
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1m
                #yaxis: y5
                #x: $ex xs
                #"y": $ex meta.t0
                #unit_of_measurement: "°C"
                #name: 1month modeled base temp
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_6m
                #yaxis: y5
                #x: $ex xs
                #"y": $ex meta.t0
                #unit_of_measurement: "°C"
                #name: 6month modeled base temp
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                yaxis: y5
                x: $ex xs
                "y": $ex meta.t0
                unit_of_measurement: "°C"
                name: 1year modeled base temp
                show_value: true
              - entity: null
                internal: true
                yaxis: y6
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1w
                #yaxis: y6
                #x: $ex xs
                #"y": $ex meta.M
                #unit_of_measurement: "m³"
                #name: 1week modeled miscellaneous gas use
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1m
                #yaxis: y6
                #x: $ex xs
                #"y": $ex meta.M
                #unit_of_measurement: "m³"
                #name: 1month modeled miscellaneous gas use
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_6m
                #yaxis: y6
                #x: $ex xs
                #"y": $ex meta.M
                #unit_of_measurement: "m³"
                #name: 6month modeled miscellaneous gas use
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                yaxis: y6
                x: $ex xs
                "y": $ex meta.M
                unit_of_measurement: "m³"
                name: 1year modeled miscellaneous gas use
                show_value: true
              - entity: null
                internal: true
                yaxis: y7
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1w
                #  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                #yaxis: y7
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: "kW"
                #name: 1week modelled capacity
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_1m
                #  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                #yaxis: y7
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: "kW"
                #name: 1month modelled capacity
                #show_value: true
                internal: true
              - entity: null
                #filters:
                #  - load_var: heat_loss_model_6m
                #  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                #yaxis: y7
                #x: $ex xs
                #"y": $ex ys
                #unit_of_measurement: "kW"
                #name: 6month modelled capacity
                #show_value: true
                internal: true
              - entity: null
                filters:
                  - load_var: heat_loss_model_1y
                  - map_y_numbers: y * (meta.t0[i] + 10) * 8.8 / 20
                yaxis: y7
                x: $ex xs
                "y": $ex ys
                unit_of_measurement: "kW"
                name: 1year modelled capacity
                show_value: true
            grid_options:
              columns: full
            refresh_interval: 1h
            raw_plotly_config: true
            color_scheme:
              - "#1f77b4"
              - "#ff7f0e"
              - "#2ca02c"
              - "#d62728"
              - "#9467bd"
            defaults:
              entity:
                line:
                  width: 1
                  color: |-
                    $fn ({ getFromConfig, path }) => {
                      const color_scheme = getFromConfig("color_scheme");
                      const t1 = path.match(/entities\.(\d+)/)
                      const t2 = t1[1]
                      return color_scheme[t2 % color_scheme.length];
                    }
              yaxes:
                side: left
                overlaying: "y"
                visible: true
                showgrid: true
                nticks: 6
            layout:
              dragmode: pan
              margin:
                t: 30
                l: 45
                r: 30
                b: 50
              height: 1800
              grid:
                rows: 7
                columns: 1
                pattern: coupled
                roworder: top to bottom
              legend:
                orientation: h
              yaxis3:
                range:
                  - 0
                  - 5
        column_span: 4
    cards: []
title: Central heating Long-Term
